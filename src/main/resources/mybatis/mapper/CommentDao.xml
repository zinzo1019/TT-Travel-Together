<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.choyoujin.dao.CommentDao">

    <!--    여행에 대해 궁금해요 - 게시글 아이디로 댓글 리스트 가져오기-->
    <select id="findAllCuriousCommentsByPostId" parameterType="int" resultType="com.example.choyoujin.dto.CommentDto">
        WITH RECURSIVE CODE_LIST(curious_comment_id, content, tb_user_id, curious_post_id,
                                 parent_comment_id, level, PATH, CYCLE)
                           as (SELECT cc.curious_comment_id        as commentId,
                                      cc.content,
                                      cc.tb_user_id                as userId,
                                      cc.curious_post_id,
                                      cc.parent_comment_id,
                                      1,
                                      ARRAY[cc.curious_comment_id] as PATH,
                                      false                        as CYCLE
                               FROM curious_comment cc
                               WHERE cc.parent_comment_id = 0
                                 AND cc.curious_post_id = #{postId}
                               UNION ALL
                               SELECT cc.curious_comment_id as commentId,
                                      cc.content,
                                      cc.tb_user_id         as userId,
                                      cc.curious_post_id,
                                      cc.parent_comment_id,
                                      B.level + 1,
                                      ARRAY_APPEND(B.PATH, cc.curious_comment_id),
                                      cc.curious_comment_id = any (B.PATH)
                               FROM curious_comment cc
                                        JOIN CODE_LIST B on cc.parent_comment_id = B.curious_comment_id
                               WHERE cc.parent_comment_id = B.curious_comment_id
                                 AND NOT CYCLE)
        SELECT cc.curious_comment_id as commentId,
               content,
               cc.tb_user_id            as userId,
               curious_post_id,
               parent_comment_id,
               path,
               level,
               tu.name               as userName
        FROM CODE_LIST cc
                 LEFT JOIN tb_user tu ON cc.tb_user_id = tu.tb_user_id
        ORDER BY path
    </select>

    <!--    같이 여행 가요 - 게시글 아이디로 댓글 리스트 가져오기-->
    <select id="findAllTogetherCommentsByPostId" parameterType="int" resultType="com.example.choyoujin.dto.CommentDto">
        WITH RECURSIVE CODE_LIST(travel_together_comment_id, content, tb_user_id, travel_together_post_id,
                                 parent_comment_id, level, PATH,
                                 CYCLE) as (SELECT ttc.travel_together_comment_id        as commentId,
                                                   ttc.content,
                                                   ttc.tb_user_id                        as userId,
                                                   ttc.travel_together_post_id,
                                                   ttc.parent_comment_id,
                                                   1,
                                                   ARRAY[ttc.travel_together_comment_id] as PATH,
                                                   false                                 as CYCLE
                                            FROM travel_together_comment ttc
                                            WHERE ttc.parent_comment_id = 0
                                              AND ttc.travel_together_post_id = #{postId}
                                            UNION ALL
                                            SELECT ttc.travel_together_comment_id as commentId,
                                                   ttc.content,
                                                   ttc.tb_user_id                 as userId,
                                                   ttc.travel_together_post_id,
                                                   ttc.parent_comment_id,
                                                   B.level + 1,
                                                   ARRAY_APPEND(B.PATH, ttc.travel_together_comment_id),
                                                   ttc.travel_together_comment_id = any (B.PATH)
                                            FROM travel_together_comment ttc
                                                     JOIN CODE_LIST B on ttc.parent_comment_id = B.travel_together_comment_id
                                            WHERE ttc.parent_comment_id = B.travel_together_comment_id
                                              AND NOT CYCLE)
        SELECT ttc.travel_together_comment_id as commentId,
               content,
               ttc.tb_user_id                     as userId,
               travel_together_post_id,
               parent_comment_id,
               path,
               level,
               tu.name                        as userName
--                i.pic_byte
        FROM CODE_LIST ttc
                 LEFT JOIN tb_user tu ON ttc.tb_user_id = tu.tb_user_id
--                  LEFT JOIN gps.yujin.image i ON u.image_id = i.id
        ORDER BY path
    </select>

    <!--    여행지 상품 상세 페이지 - 게시글 아이디로 댓글 리스트 가져오기-->
    <select id="findAllProductCommentsByPostId" parameterType="int" resultType="com.example.choyoujin.dto.CommentDto">
        WITH RECURSIVE CODE_LIST(travel_product_comment_id, content, tb_user_id, travel_product_id, parent_comment_id,
                                 level, PATH, CYCLE)
                           as (SELECT tpc.travel_product_comment_id as commentId,
                                      tpc.content,
                                      tpc.tb_user_id                as userId,
                                      tpc.travel_product_id,
                                      tpc.parent_comment_id,
                                      1,
                                      ARRAY[tpc.travel_product_comment_id] as PATH,
                                      false         as CYCLE
        FROM travel_product_comment tpc
        WHERE tpc.parent_comment_id = 0
          AND tpc.travel_product_id = #{postId}
        UNION ALL
        SELECT tpc.travel_product_comment_id as commentId,
               tpc.content,
               tpc.tb_user_id                as userId,
               tpc.travel_product_id,
               tpc.parent_comment_id,
               B.level + 1,
               ARRAY_APPEND(B.PATH, tpc.travel_product_comment_id),
               tpc.travel_product_comment_id = any (B.PATH)
        FROM travel_product_comment tpc
                 JOIN CODE_LIST B
                      on tpc.parent_comment_id = B.travel_product_comment_id
        WHERE tpc.parent_comment_id = B.travel_product_comment_id
          AND NOT CYCLE)
        SELECT tpc.travel_product_comment_id as commentId,
               content,
               tpc.tb_user_id                    as userId,
               travel_product_id,
               parent_comment_id,
               path,
               level,
               tu.name                       as userName
        FROM CODE_LIST tpc
                 LEFT JOIN tb_user tu
                           ON tpc.tb_user_id = tu.tb_user_id
        ORDER BY path
    </select>

    <!--    여행에 대해 궁금해요 - 댓글 저장하기-->
    <insert id="saveCuriousComment" parameterType="com.example.choyoujin.dto.CommentDto">
        insert into curious_comment (curious_post_id, content, create_date, tb_user_id, level, parent_comment_id)
        values (#{postId}, #{content}, #{createDate}, #{userId}, #{level}, #{parentCommentId})
    </insert>

    <!--    같이 여행 가요 - 댓글 저장하기-->
    <insert id="saveTogetherComment" parameterType="com.example.choyoujin.dto.CommentDto">
        insert into travel_together_comment (travel_together_post_id, content, create_date, tb_user_id, level,
                                             parent_comment_id)
        values (#{postId}, #{content}, #{createDate}, #{userId}, #{level}, #{parentCommentId})
    </insert>

    <!--    여행 상품 - 댓글 저장하기-->
    <insert id="saveProductComment" parameterType="com.example.choyoujin.dto.CommentDto">
        insert into travel_product_comment (travel_product_id, content, create_date, tb_user_id, level,
                                            parent_comment_id)
        values (#{productId}, #{content}, #{createDate}, #{userId}, #{level}, #{parentCommentId})
    </insert>

    <!--    여행에 대해 궁금해요 -  댓글 리스트 삭제하기-->
    <delete id="deleteCuriousCommentsByPostId">
        delete
        from curious_comment
        where curious_post_id = #{postId}
    </delete>

    <!--    함께 여행 가요 - 댓글 리스트 삭제하기-->
    <delete id="deleteTogetherCommentsByPostId">
        delete
        from travel_together_comment
        where travel_together_post_id = #{postId}
    </delete>

    <!--    여행 상품 - 댓글 리스트 삭제하기-->
    <delete id="deleteProductCommentsByPostId">
        delete
        from travel_product_comment
        where travel_product_id = #{postId}
    </delete>

    <!--    여행에 대해 궁금해요 -  개별 댓글 삭제하기-->
    <update id="deleteCuriousComment">
        update curious_comment
        set content = '삭제된 댓글입니다.'
        where curious_comment_id = #{commentId}
    </update>

    <!--    함께 여행 가요 - 개별 댓글 삭제하기-->
    <update id="deleteTogetherComment">
        update travel_together_comment
        set content = '삭제된 댓글입니다.'
        where travel_together_comment_id = #{commentId}
    </update>

    <!--    여행 상품 - 개별 댓글 삭제하기-->
    <update id="deleteProductComment">
        update travel_product_comment
        set content = '삭제된 댓글입니다.'
        where travel_product_comment_id = #{commentId}
    </update>
</mapper>